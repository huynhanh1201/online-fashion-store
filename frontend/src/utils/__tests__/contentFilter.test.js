// Test cases for content filter
import { contentFilter } from '../contentFilter'

// Test cases
const testCases = [
  // Valid content
  {
    input: 'S·∫£n ph·∫©m r·∫•t t·ªët, ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi!',
    expected: { isValid: true, violations: [] }
  },
  {
    input: 'H√†ng ƒë·∫πp, giao nhanh, t√¥i r·∫•t h√†i l√≤ng',
    expected: { isValid: true, violations: [] }
  },

  // Sensitive words
  {
    input: 'S·∫£n ph·∫©m ƒë·ªì n√°t, ch·∫•t l∆∞·ª£ng cc',
    expected: { isValid: false, violations: ['T·ª´ ng·ªØ kh√¥ng ph√π h·ª£p'] }
  },
  {
    input: 'Fuck this product',
    expected: { isValid: false, violations: ['T·ª´ ng·ªØ kh√¥ng ph√π h·ª£p'] }
  },

  // Phone numbers
  {
    input: 'Li√™n h·ªá t√¥i qua s·ªë 0901234567',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª s·ªë ƒëi·ªán tho·∫°i'] }
  },
  {
    input: 'G·ªçi +84901234567 ƒë·ªÉ mua h√†ng',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª s·ªë ƒëi·ªán tho·∫°i'] }
  },

  // Email addresses
  {
    input: 'Email t√¥i: test@gmail.com',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª ƒë·ªãa ch·ªâ email'] }
  },

  // URLs
  {
    input: 'Xem th√™m t·∫°i https://example.com',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª li√™n k·∫øt website'] }
  },
  {
    input: 'V√†o www.google.com ƒë·ªÉ t√¨m hi·ªÉu',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª li√™n k·∫øt website'] }
  },

  // Social media
  {
    input: 'Follow t√¥i tr√™n facebook.com/mypage',
    expected: { isValid: false, violations: ['Kh√¥ng ƒë∆∞·ª£c chia s·∫ª li√™n k·∫øt m·∫°ng x√£ h·ªôi'] }
  },

  // Spam patterns
  {
    input: 'MUA NGAY H√îM NAY!!!',
    expected: { isValid: false, violations: ['Qu√° nhi·ªÅu ch·ªØ in hoa'] }
  },
  {
    input: 'T·ªá·ªá·ªá·ªá·ªá·ªá qu√°√°√°√°',
    expected: { isValid: false, violations: ['Qu√° nhi·ªÅu k√Ω t·ª± l·∫∑p l·∫°i'] }
  },

  // Warning words (should not block but warn)
  {
    input: 'S·∫£n ph·∫©m h∆°i t·ªá nh∆∞ng v·∫´n d√πng ƒë∆∞·ª£c',
    expected: { isValid: true, warnings: ['Ch√∫ √Ω'] }
  }
]

// Test function
export const runContentFilterTests = () => {
  console.log('üîç Testing Content Filter...')

  let passed = 0
  let failed = 0

  testCases.forEach((testCase, index) => {
    const result = contentFilter.filterContent(testCase.input)

    const isValidMatch = result.isValid === testCase.expected.isValid
    const hasExpectedViolations = testCase.expected.violations.length === 0 ||
      result.violations.some(v => testCase.expected.violations.some(ev => v.includes(ev)))

    if (isValidMatch && hasExpectedViolations) {
      console.log(`‚úÖ Test ${index + 1}: PASSED`)
      console.log(`   Input: "${testCase.input}"`)
      console.log(`   Valid: ${result.isValid}`)
      if (result.violations.length > 0) {
        console.log(`   Violations: ${result.violations.join(', ')}`)
      }
      if (result.warnings && result.warnings.length > 0) {
        console.log(`   Warnings: ${result.warnings.join(', ')}`)
      }
      passed++
    } else {
      console.log(`‚ùå Test ${index + 1}: FAILED`)
      console.log(`   Input: "${testCase.input}"`)
      console.log(`   Expected valid: ${testCase.expected.isValid}, Got: ${result.isValid}`)
      console.log(`   Expected violations: ${testCase.expected.violations.join(', ')}`)
      console.log(`   Got violations: ${result.violations.join(', ')}`)
      failed++
    }
    console.log('')
  })

  console.log(`üìä Test Results: ${passed} passed, ${failed} failed`)
  return { passed, failed, total: testCases.length }
}

// Manual test examples
export const manualTestExamples = [
  // Good examples
  'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω',
  'ƒê√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh',
  'T√¥i r·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y',

  // Bad examples that should be caught
  'S·∫£n ph·∫©m ƒë·ªì n√°t, l·ª´a ƒë·∫£o kh√°ch h√†ng',
  'Li√™n h·ªá zalo 0901234567 ƒë·ªÉ mua h√†ng r·∫ª h∆°n',
  'Email t√¥i abc@gmail.com n·∫øu c·∫ßn',
  'Xem shopee.vn/mystore ƒë·ªÉ mua r·∫ª h∆°n',
  'Fuck this shit product',
  'MUA NGAY K·∫∫O H·∫æT H√ÄNG!!!!!',

  // Edge cases
  'S·∫£n ph·∫©m ·ªïn nh∆∞ng c√≥ th·ªÉ c·∫£i thi·ªán th√™m',
  'Ch·∫•t l∆∞·ª£ng kh√¥ng nh∆∞ mong ƒë·ª£i nh∆∞ng v·∫´n d√πng ƒë∆∞·ª£c',
  'H∆°i th·∫•t v·ªçng nh∆∞ng s·∫Ω th·ª≠ l·∫ßn n·ªØa'
]

// Export for use in console
if (typeof window !== 'undefined') {
  window.testContentFilter = runContentFilterTests
  window.manualTestExamples = manualTestExamples
  window.contentFilter = contentFilter
}